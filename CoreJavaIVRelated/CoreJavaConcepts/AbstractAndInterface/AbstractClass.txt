/*
 Abstract class:Def-If  is-a relationship exist  between super type and subtype AND if we want same 
 method signature in subtype so we should declare supertype as Abstact.
 A class which is declared with the abstract keyword is known as an abstract class in Java. It can have abstract and non-abstract methods (method with the body).

 Before learning the Java abstract class, let's understand the abstraction in Java first.
 Interface:Def-If is-a relationship is not present in super type and sub type and if we want same
 method signature within subtype then super type should be interface.

 Abstraction In Java:process of hiding the implementation details and showing only functionalities.
 or process hiding unnecessary things and showing only necessary things.
 Note:Abstraction lets you focus on what the object does instead of how it does it.
 Abstract class in Java
A class which is declared as abstract is known as an abstract class. It can have abstract
and non-abstract methods. It needs to be extended and its method implemented.
It cannot be instantiated.
 Points to Remember:
1) An abstract class must be declared with an abstract keyword.
2) It can have abstract and non-abstract methods.
3) It cannot be instantiated.
4) It can have constructors and static methods also.
5) It can have final methods which will force the subclass not to change the body of the method.
 */


# Understanding the real scenario of Abstract class
In this example, Shape is the abstract class, and its implementation is provided by the Rectangle and Circle classes.


Mostly, we don't know about the implementation class (which is hidden to the end user), and an object of the implementation class is provided by the factory method.

A factory method is a method that returns the instance of the class. We will learn about the factory method later.

In this example, if you create the instance of Rectangle class, draw() method of Rectangle class will be invoked.

abstract class Shape{  
abstract void draw();  
}  
//In real scenario, implementation is provided by others i.e. unknown by end user  
class Rectangle extends Shape{  
void draw(){System.out.println("drawing rectangle");}  
}  
class Circle1 extends Shape{  
void draw(){System.out.println("drawing circle");}  
}  
//In real scenario, method is called by programmer or user  
class TestAbstraction1{  
public static void main(String args[]){  
Shape s=new Circle1();//In a real scenario, object is provided through method, e.g., getShape() method  
s.draw();  
}  
}  

Example:
public abstract class Shape{
public abstract void draw();
}