Interface in Java:
An interface in Java is a blueprint of a class. It has static constants and abstract methods.
The interface in Java is a mechanism to achieve abstraction. There can be only abstract
 methods in the Java interface, not method body. It is used to achieve abstraction and multiple inheritance in Java.
In other words, you can say that interfaces can have abstract methods and variables. 
It cannot have a method body.

Java Interface also represents the IS-A relationship.
It cannot be instantiated just like the abstract class.


Since Java 8, we can have default and static methods in an interface.

Since Java 9, we can have private methods in an interface.

Why use Java interface?
There are mainly three reasons to use interface. They are given below.

1)It is used to achieve abstraction.
2)By interface, we can support the functionality of multiple inheritance.
3)It can be used to achieve loose coupling.

#multiple Inheritance:
Q) Why multiple inheritance is not supported in java?
When one class inherits multiple classes, it is known as multiple inheritance.
(def:a subclass can inherit from two or more superclasses)
eg.Consider a scenario where A, B, and C are three classes. The C class inherits 
A and B classes. If A and B classes have the same method and you call it from child class object, there will be ambiguity to call the method of A or B class.
Since compile-time errors are better than runtime errors, Java renders compile-time
 error if you inherit 2 classes. So whether you have same method or different, there will be compile time error.

class A{  
void msg(){System.out.println("Hello");}  
}  
class B{  
void msg(){System.out.println("Welcome");}  
}  
class C extends A,B{//suppose if it were  
   
 public static void main(String args[]){  
   C obj=new C();  
   obj.msg();//Now which msg() method would be invoked?  
}  
}  

Q) Multiple inheritance is not supported through class in java, but it is possible 
by an interface, why?
ans:
As we have explained in the inheritance chapter, multiple inheritance is not supported in the case of class because of ambiguity. However, it is supported in case of an interface because there is no ambiguity. It is because its implementation is provided by the 
implementation class. For example:

interface Printable{  
void print();  
}  
interface Showable{  
void print();  
}  
  
class TestInterface3 implements Printable, Showable{  
public void print(){System.out.println("Hello");}  
public static void main(String args[]){  
TestInterface3 obj = new TestInterface3();  
obj.print();  
 }  
}  
//Output:Hello
As you can see in the above example, Printable and Showable interface have same methods but its implementation is provided by class TestTnterface1, 
so there is no ambiguity.

# Interface inheritance
A class implements an interface, but one interface extends another interface.

interface Printable{  
void print();  
}  
interface Showable extends Printable{  
void show();  
}  
class TestInterface4 implements Showable{  
public void print(){System.out.println("Hello");}  
public void show(){System.out.println("Welcome");}  
  
public static void main(String args[]){  
TestInterface4 obj = new TestInterface4();  
obj.print();  
obj.show();  
 }  
}  
//Output:Hello
Welcome

# Java 8 Default Method in Interface
Since Java 8, we can have method body in interface. But we need to make it default method. 
Let's see an example:

File: TestInterfaceDefault.java

interface Drawable{  
void draw();  
default void msg(){System.out.println("default method");}  //method with  body
}  
class Rectangle implements Drawable{  
public void draw(){System.out.println("drawing rectangle");}  
}  
class TestInterfaceDefault{  
public static void main(String args[]){  
Drawable d=new Rectangle();  
d.draw();  
d.msg();  
}}  

output:drawing rectangle
default method

// Java 8 Static Method in Interface
Since Java 8, we can have static method in interface. Let's see an example:

File: TestInterfaceStatic.java

interface Drawable{  
void draw();  
static int cube(int x){return x*x*x;}  
}  
class Rectangle implements Drawable{  
public void draw(){System.out.println("drawing rectangle");}  
}  
  
class TestInterfaceStatic{  
public static void main(String args[]){  
Drawable d=new Rectangle();  
d.draw();  
System.out.println(Drawable.cube(3));  
}}  
output:
drawing rectangle
27

//Q) What is marker or tagged interface?
An interface which has no member is known as a marker or tagged interface, for example, Serializable, Cloneable, Remote, etc. They are used to provide some essential information to the JVM so that JVM may
perform some useful operation.
//How Serializable interface is written?  
public interface Serializable{  
}  

// Java Nested Interface:
An interface, i.e., declared within another interface or class, is known as a nested interface. 
The nested interfaces are used to group related interfaces so that they can be easy to maintain. The nested interface must be referred to by the outer
 interface or class. It can't be accessed directly.

// Points to remember for nested interfaces
There are given some points that should be remembered by the java programmer.
THE NESTED INTERFACE MUST BE PUBLIC IF IT IS DECLARED INSIDE INTERFACE, but it can 
have any access modifier if declared within the class.
Nested interfaces are declared static

## Syntax of nested interface which is declared within the interface

interface interface_name{  
 ...  
 interface nested_interface_name{  
  ...  
 }  
}   

Syntax of nested interface which is declared within the class
class class_name{  
 ...  
 interface nested_interface_name{  
  ...  
 }  
}   

Example of nested interface which is declared within the interface
In this example, we will learn how to declare the nested interface 
and how we can access it.
interface Showable{  
  void show();  
  interface Message{  
   void msg();  
  }  
}  
class TestNestedInterface1 implements Showable.Message{  
 public void msg(){System.out.println("Hello nested interface");}  
  
 public static void main(String args[]){  
  Showable.Message message=new TestNestedInterface1();//upcasting here  
  message.msg();  
 }  
}  
Output:
hello nested interface

Note:As you can see in the above example, we are accessing the Message interface by 
its outer interface Showable because it cannot be accessed directly. It is just like the 
almirah inside the room; we cannot access the almirah directly because we must enter the room first. In the collection framework, the sun microsystem has provided a nested interface Entry. 
Entry is the subinterface of Map, i.e., accessed by Map.Entry.

## Internal code generated by the java compiler for nested interface Message
    The java compiler internally creates a public and static interface as displayed below:

public static interface Showable$Message  
{  
  public abstract void msg();  
}  
Example of nested interface which is declared within the class
Let's see how we can define an interface inside the class and how we can access it.

TestNestedInterface2.java

class A{  
  interface Message{  
   void msg();  
  }  
}  
  
class TestNestedInterface2 implements A.Message{  
 public void msg(){System.out.println("Hello nested interface");}  
  
 public static void main(String args[]){  
  A.Message message=new TestNestedInterface2();//upcasting here  
  message.msg();  
 }  
}  

Output:hello nested interface

Que): Can we define a class inside the interface?
Ans:Yes, if we define a class inside the interface, the Java compiler creates a 
static nested class. Let's see how can we define a class within the interface:

interface M{  
  class A{}  
}  

Example:
public interface Drawable{
void draw();
}
